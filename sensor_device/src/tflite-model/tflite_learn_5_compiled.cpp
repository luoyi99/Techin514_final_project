/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 28.02.2024 02:20:14

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1760;
#else
constexpr int kTensorArenaSize = 736;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,84 } };
const ALIGN(16) float tensor_data1[10] = { 0.0043723182752728462, 0.0012692618183791637, 0.0041940193623304367, 0.0059316735714673996, 0.0038986420258879662, -0.0050101866945624352, 0.021228678524494171, -0.0087658148258924484, 0.010508784092962742, 0.0057100025005638599, };
const TfArray<1, int> tensor_dimension1 = { 1, { 10 } };
const ALIGN(16) float tensor_data2[20] = { 0.016372330486774445, -0.011454500257968903, -0.0046651274897158146, -0.0050880773924291134, 0.0011559582781046629, 0.0069725853390991688, 0, 0.0032206028699874878, -0.01839064247906208, 0.014310137368738651, 0.014907177537679672, -0.016343198716640472, 0, -0.0085800830274820328, 0.0097204549238085747, -0.0017087756423279643, 0, 1.7922517145052552e-05, 0, 0, };
const TfArray<1, int> tensor_dimension2 = { 1, { 20 } };
const ALIGN(8) float tensor_data3[2] = { 0.005872432142496109, -0.005872432142496109, };
const TfArray<1, int> tensor_dimension3 = { 1, { 2 } };
const ALIGN(16) float tensor_data4[20*84] = { 
  0.015685055404901505, -0.014311774633824825, -0.03358522430062294, 0.17903950810432434, 0.049804702401161194, 0.097719483077526093, 0.085426032543182373, -0.16921588778495789, 0.096656501293182373, -0.17193609476089478, 0.0095390202477574348, 0.101944200694561, -0.1932910829782486, -0.13887718319892883, -0.034433402121067047, 0.22584274411201477, 0.076623030006885529, 0.15374991297721863, -0.11457152664661407, -0.11391383409500122, 0.22056402266025543, -0.061453301459550858, 0.1854146420955658, 0.058081608265638351, -0.20166665315628052, 0.16659058630466461, -0.10525618493556976, -0.10287646949291229, -0.14734739065170288, -0.19548077881336212, 0.073462381958961487, 0.057418655604124069, 0.13456211984157562, -0.20313823223114014, -0.2069830596446991, 0.094121389091014862, -0.13882564008235931, 0.18723885715007782, -0.0058250734582543373, -0.13594980537891388, 0.11428483575582504, -0.0036669103428721428, -0.1602940559387207, -0.054796840995550156, -0.18780085444450378, 0.17360754311084747, -0.083452671766281128, 0.20652315020561218, -0.13602696359157562, -0.16962596774101257, -0.042038295418024063, -0.20193955302238464, 0.1126149520277977, -0.032854329794645309, -0.20723429322242737, 0.16493865847587585, 0.2405572384595871, 0.19244652986526489, 0.24920070171356201, 0.12256678938865662, 0.078621268272399902, -0.10590051114559174, 0.040278114378452301, -0.17768208682537079, -0.025035496801137924, -0.14980718493461609, 0.019288243725895882, 0.092032238841056824, 0.21101438999176025, -0.016292516142129898, 0.074017859995365143, -0.18321697413921356, -0.12805953621864319, -0.081401370465755463, -0.050169393420219421, -0.12938126921653748, 0.18151524662971497, 0.10951566696166992, -0.01962464302778244, 0.21146766841411591, 0.083553880453109741, 0.0088852150365710258, -0.048663783818483353, 0.085116170346736908, 
  -0.24400807917118073, -0.02545885369181633, 0.18377599120140076, 0.044702038168907166, -0.090318165719509125, 0.018614578992128372, 0.085199698805809021, 0.050205059349536896, 0.11803585290908813, 0.20593069493770599, -0.16479158401489258, 0.086729057133197784, 0.055756177753210068, 0.044209875166416168, 0.13348513841629028, -0.14035084843635559, 0.17144779860973358, 0.12980690598487854, 0.23942852020263672, -0.14152407646179199, -0.053212195634841919, -0.023395508527755737, 0.18503843247890472, -0.055731851607561111, 0.11012737452983856, 0.10383801907300949, -0.05344613641500473, 0.16311593353748322, -0.068256758153438568, -0.18533408641815186, -0.048594385385513306, 0.23543766140937805, 0.21764075756072998, 0.24238798022270203, 0.14713147282600403, -0.061039924621582031, -0.20314151048660278, -0.036270193755626678, 0.045642748475074768, -0.12176087498664856, -0.10417121648788452, -0.13265454769134521, 0.22004333138465881, 0.15245683491230011, 0.12267068773508072, -0.045521426945924759, 0.17511934041976929, -0.16468049585819244, 0.0044810976833105087, 0.00056781055172905326, -0.2284170389175415, -0.0435071662068367, -0.0087387114763259888, -0.1049826592206955, -0.039792373776435852, -0.24879142642021179, -0.23574380576610565, 0.17861057817935944, 0.18727907538414001, -0.18524004518985748, -0.026995884254574776, 0.17754937708377838, -0.10127359628677368, -0.025364195927977562, -0.071513965725898743, -0.0046446840278804302, 0.17757661640644073, -0.24263088405132294, 0.11241189390420914, -0.077585242688655853, 0.20282560586929321, -0.14537335932254791, 0.13166025280952454, -0.015388608910143375, 0.034037146717309952, 0.19350320100784302, -0.081374600529670715, -0.13388383388519287, -0.022397959604859352, 0.20034830272197723, -0.038144100457429886, -0.2487664669752121, -0.12657341361045837, -0.01527125108987093, 
  0.14890184998512268, -0.034760069102048874, -0.20739339292049408, -0.17236945033073425, 0.12279427796602249, -0.10433277487754822, 0.1400829404592514, 0.21943813562393188, 0.22392062842845917, -0.020658474415540695, -0.17514477670192719, 0.038292698562145233, -0.19450859725475311, 0.1038668230175972, -0.14171440899372101, 0.16239768266677856, 0.073927931487560272, 0.13043023645877838, 0.0031021088361740112, 0.10086998343467712, 0.24142232537269592, -0.22107891738414764, 0.12816105782985687, -0.18486197292804718, 0.033818516880273819, -0.058887626975774765, 0.22271005809307098, 0.10683490335941315, -0.12676958739757538, -0.18466110527515411, -0.11946750432252884, 0.14873558282852173, 0.1250147670507431, -0.16709215939044952, -0.042610034346580505, -0.073747307062149048, -0.20025068521499634, -0.011414900422096252, 0.14705686271190643, -0.17717587947845459, 0.10866463184356689, 0.1202981248497963, -0.22600884735584259, -0.042002148926258087, 0.081851206719875336, -0.060416389256715775, -0.12287852168083191, -0.18987883627414703, 0.093604356050491333, -0.061180561780929565, 0.12561541795730591, -0.041452061384916306, -0.026353446766734123, 0.0072805783711373806, 0.13462246954441071, -0.20267492532730103, 0.02069946750998497, 0.032564837485551834, 0.028265871107578278, -0.057249769568443298, 0.21489232778549194, -0.08423902839422226, -0.046310354024171829, 0.037393786013126373, -0.052534081041812897, 0.13080988824367523, 0.042575463652610779, -0.14019079506397247, -0.053354211151599884, -0.073618263006210327, -0.017101578414440155, -0.23605740070343018, 0.0098397731781005859, 0.20570914447307587, -0.040420513600111008, -0.20321261882781982, -0.2014693021774292, 0.1286650151014328, -0.11673986166715622, -0.14089582860469818, 0.10478418320417404, -0.12738820910453796, 0.080561898648738861, -0.013514913618564606, 
  -0.20148588716983795, 0.12201984226703644, -0.12854103744029999, 0.13538546860218048, -0.00029554884531535208, 0.1571817547082901, -0.025482853874564171, 0.24866579473018646, 0.11145030707120895, -0.1995035856962204, 0.19792306423187256, 0.19061635434627533, 0.095011793076992035, 0.13658547401428223, 0.097402341663837433, -0.056694522500038147, -0.18540880084037781, -0.12313015758991241, 0.078675270080566406, 0.14935353398323059, -0.15007407963275909, 0.096515089273452759, -0.15478911995887756, -0.086710996925830841, 0.14888887107372284, 0.12245010584592819, -0.16642138361930847, 0.13103002309799194, 0.19277794659137726, 0.15189529955387115, -0.10732940584421158, 0.090750940144062042, 0.20059873163700104, -0.10287350416183472, 0.14632733166217804, 0.032178834080696106, 0.23522350192070007, -0.22399173676967621, 0.054694395512342453, 0.16636249423027039, -0.20679603517055511, 0.13556975126266479, -0.0028297172393649817, 0.17928674817085266, 0.22267282009124756, -0.19615434110164642, -0.0099611151963472366, -0.15119980275630951, 0.15036414563655853, 0.10929884761571884, -0.15171240270137787, 0.0025068128015846014, -0.031884688884019852, -0.22865314781665802, 0.065271526575088501, -0.19126221537590027, -0.2081984281539917, -0.2332557886838913, -0.095634758472442627, -0.022094160318374634, 0.21630106866359711, 0.083701424300670624, 0.21387088298797607, 0.17240644991397858, -0.15600584447383881, -0.22032415866851807, 0.12802571058273315, -0.21143355965614319, -0.14196766912937164, -0.21177378296852112, 0.13053050637245178, -0.12975196540355682, -0.13584516942501068, -0.16724874079227448, 0.051155660301446915, 0.080630794167518616, -0.060015808790922165, 0.23824845254421234, 0.079858452081680298, 0.23237946629524231, 0.053797628730535507, 0.1547086238861084, 0.15028443932533264, -0.077459119260311127, 
  0.1940598338842392, 0.048932664096355438, 0.037993993610143661, -0.15359830856323242, -0.17934891581535339, -0.1687319278717041, 0.20180749893188477, -0.04775981605052948, -0.10693705826997757, 0.14302632212638855, -0.064062513411045074, 0.04677031934261322, -0.15716743469238281, -0.11057734489440918, -0.16181588172912598, 0.1304476261138916, 0.13934141397476196, 0.1471707820892334, -0.020650239661335945, -0.055608395487070084, -0.019807906821370125, 0.21779948472976685, -0.047433126717805862, -0.034344226121902466, -0.07038995623588562, 0.014198098331689835, 0.17014026641845703, 0.15675471723079681, -0.21752162277698517, -0.18290139734745026, 0.11344683915376663, -0.1604757159948349, 0.20806531608104706, -0.17322631180286407, -0.071583330631256104, -0.11909406632184982, -0.070396021008491516, -0.21385124325752258, 0.059287942945957184, 0.14178062975406647, 0.017327040433883667, 0.070028059184551239, -0.20804673433303833, -0.083505585789680481, 0.13348978757858276, -0.16112291812896729, 0.17355358600616455, 0.14221665263175964, -0.038536366075277328, 0.15950649976730347, 0.15218444168567657, 0.18103650212287903, -0.17210142314434052, -0.05191132053732872, -0.05480729416012764, 0.22865326702594757, 0.15175540745258331, 0.1871161162853241, 0.21182282269001007, 0.14404040575027466, -0.20754756033420563, -0.19477781653404236, 0.20738139748573303, 0.21441258490085602, 0.018552068620920181, 0.12879924476146698, -0.11197394877672195, 0.22983838617801666, -0.22313565015792847, -0.049632444977760315, -0.20578490197658539, 0.063837632536888123, 0.16226764023303986, 0.083329349756240845, 0.097033709287643433, 0.10965418815612793, -0.078056454658508301, -0.065565720200538635, -0.11751528829336166, -0.091724514961242676, 0.1790429949760437, -0.22560234367847443, 0.11003782600164413, -0.16560320556163788, 
  -0.064469680190086365, 0.17966228723526001, 0.044001258909702301, 0.00066652795067057014, -0.10202877223491669, -0.20999228954315186, 0.037078246474266052, 0.21496035158634186, -0.071596138179302216, 0.051267068833112717, -0.22719243168830872, -0.086169719696044922, -0.21018192172050476, 0.12329448759555817, 0.047656670212745667, -0.0009315278148278594, -0.21021474897861481, 0.075072094798088074, -0.073170654475688934, 0.020108262076973915, -0.19257678091526031, -0.19621886312961578, -0.030216995626688004, -0.12033793330192566, 0.16838884353637695, -0.063513204455375671, 0.055679898709058762, -0.020223131403326988, -0.10585656017065048, 0.23730190098285675, -0.043303065001964569, -0.014437766745686531, 0.18773800134658813, -0.14103692770004272, 0.046681828796863556, -0.21718242764472961, 0.15292930603027344, -0.14618112146854401, 0.082928664982318878, 0.19954110682010651, 0.17456190288066864, 0.10646018385887146, -0.1566283106803894, -0.059640295803546906, 0.045605048537254333, -0.21794396638870239, -0.1771862655878067, -0.15870670974254608, -0.020192822441458702, 0.15075145661830902, 0.19881795346736908, -0.04870263859629631, 0.061005517840385437, -0.11072226613759995, 0.090407319366931915, 0.15476466715335846, 0.086885802447795868, -0.02740928903222084, 0.1347363293170929, 0.0045845839194953442, 0.058412414044141769, -0.22906966507434845, 0.16888830065727234, -0.18933825194835663, -0.066533200442790985, 0.010407047346234322, -0.072012029588222504, 0.20080050826072693, 0.1884087473154068, 0.097123540937900543, 0.22725902497768402, -0.099082872271537781, 0.17249257862567902, -0.18506044149398804, -0.23639433085918427, -0.15298826992511749, -0.022830778732895851, -0.036381840705871582, 0.15259714424610138, 0.0023931164760142565, -0.18527370691299438, 0.08940356969833374, -0.12101873755455017, 0.19431231915950775, 
  0.11560362577438354, -0.066999733448028564, -0.084801405668258667, -0.12986323237419128, -0.14692547917366028, -0.23249867558479309, -0.077978819608688354, 0.16896149516105652, -0.083599567413330078, 0.019829928874969482, -0.0092759430408477783, -0.017848759889602661, 0.0023527294397354126, 0.1383340060710907, 0.093648433685302734, -0.037634775042533875, -0.095858275890350342, -0.12082689255475998, 0.23310485482215881, 0.18404945731163025, -0.11258494853973389, 0.045359700918197632, -0.10658808052539825, 0.15372654795646667, -0.094608664512634277, -0.022999003529548645, 0.23798841238021851, -0.19673021137714386, 0.19217336177825928, 0.060776382684707642, 0.15900632739067078, -0.22049549221992493, 0.002789720892906189, -0.02932332456111908, -0.1852811872959137, 0.13820508122444153, -0.21575923264026642, 0.097679108381271362, -0.19150415062904358, 0.23779430985450745, -0.025437861680984497, 0.051405608654022217, -0.01843889057636261, 0.011018842458724976, -0.11781749129295349, -0.20374934375286102, 0.22975254058837891, -0.12837024033069611, -0.023242905735969543, -0.049961403012275696, -0.15686972439289093, 0.19650980830192566, -0.20505964756011963, 0.14611276984214783, 0.076951593160629272, -0.025866672396659851, 0.020466387271881104, 0.19723445177078247, 0.1295616626739502, -0.085085853934288025, -0.14778877794742584, 0.024507910013198853, 0.16931340098381042, -0.14402340352535248, 0.1135251522064209, 0.062288135290145874, -0.21343238651752472, 0.15077900886535645, -0.17619681358337402, -0.12907472252845764, 0.039431095123291016, 0.2108481228351593, -0.070214316248893738, 0.11033576726913452, 0.06933709979057312, 0.14183646440505981, 0.11105805635452271, 0.18756738305091858, 0.1041187047958374, -0.10423891246318817, 0.17729070782661438, 0.14589640498161316, 0.011182099580764771, 0.070837080478668213, 
  0.17773225903511047, -0.23314665257930756, 0.068305909633636475, 0.20635832846164703, 0.19001170992851257, 0.052055884152650833, 0.062948398292064667, 0.080240897834300995, -0.077592507004737854, 0.19626982510089874, -0.057358045130968094, 0.22564674913883209, -0.069334134459495544, 0.099759459495544434, -0.1535913497209549, -0.22711451351642609, -0.076949886977672577, -0.11927389353513718, -0.16116686165332794, 0.22046221792697906, 0.18985719978809357, -0.1530541330575943, -0.12475838512182236, -0.0090147778391838074, -0.060296397656202316, 0.22363217175006866, -0.065751500427722931, 0.071673423051834106, -0.22244279086589813, -0.035896055400371552, 0.051055680960416794, 0.2257092148065567, 0.047792773693799973, -0.21071512997150421, -0.089842632412910461, -0.22378340363502502, -0.046017304062843323, 0.06021595373749733, 0.15271085500717163, -0.085255801677703857, -0.03343469649553299, 0.072746962308883667, 0.24276034533977509, 0.23114857077598572, 0.084333114326000214, -0.012611605226993561, 0.048210546374320984, -0.20209620893001556, -0.14976067841053009, 0.11570271104574203, -0.16526827216148376, -0.073494464159011841, -0.058259151875972748, 0.027213918045163155, -0.08458574116230011, -0.14292864501476288, -0.20292016863822937, 0.16149604320526123, 0.15364320576190948, -0.23882202804088593, -0.1656094491481781, -0.082598268985748291, 0.12910330295562744, -0.1779128760099411, 0.12649735808372498, 0.069522500038146973, 0.06087348610162735, -0.093313127756118774, -0.11341369897127151, 0.23395293951034546, -0.14146432280540466, 0.043275989592075348, -0.040736980736255646, 0.096250481903553009, -0.0044169770553708076, 0.041533611714839935, -0.08965117484331131, 0.13465343415737152, -0.12093455344438553, 0.11163757741451263, 0.22782059013843536, -0.23932924866676331, 0.15351234376430511, -0.0072540333494544029, 
  0.11176304519176483, 0.21274392306804657, 0.12736545503139496, -0.036499444395303726, -0.18416208028793335, 0.16716597974300385, -0.042789749801158905, -0.12074100971221924, -0.039200205355882645, -0.051222257316112518, 0.0092188045382499695, 0.1320415735244751, 0.11852419376373291, -0.10215432941913605, 0.019693765789270401, -0.12077819555997849, 0.078402057290077209, -0.10422181338071823, 0.23484057188034058, 0.048509195446968079, 0.20356164872646332, 0.16110315918922424, 0.20172317326068878, 0.085355155169963837, 0.13985756039619446, 0.13962838053703308, 0.16686281561851501, -0.037026029080152512, 0.17841824889183044, -0.22617998719215393, 0.11365453898906708, -0.22130690515041351, -0.02370329387485981, 0.0079184016212821007, -0.20566168427467346, -0.055751800537109375, -0.21900276839733124, 0.18985161185264587, -0.16434630751609802, 0.0116030378267169, -0.12845496833324432, -0.14027509093284607, -0.23401065170764923, -0.11111537367105484, -0.22699332237243652, 0.081661835312843323, -0.083045631647109985, -0.029987722635269165, -0.13056284189224243, 0.071219742298126221, -0.23794537782669067, -0.24427872896194458, 0.23559156060218811, -0.16111013293266296, 0.1250634640455246, 0.098183915019035339, 0.013229034841060638, 0.096166893839836121, -0.039005987346172333, -0.082086473703384399, 0.16845415532588959, -0.037166804075241089, 0.1824401468038559, -0.077713228762149811, -0.0040111937560141087, -0.2417532205581665, 0.19488725066184998, 0.15548105537891388, 0.12973764538764954, -0.13243755698204041, -0.11911829560995102, -0.090881392359733582, 0.020410386845469475, -0.17722086608409882, -0.073799014091491699, -0.21301613748073578, -0.18715398013591766, -0.10751631855964661, -0.15075534582138062, 0.19053187966346741, -0.11524015665054321, -0.14757072925567627, -0.19151939451694489, -0.12580597400665283, 
  -0.18471638858318329, 0.11813762038946152, -0.19108068943023682, -0.030405221506953239, -0.12729878723621368, 0.15256157517433167, -0.20261283218860626, 0.0096522253006696701, -0.13885883986949921, -0.22533544898033142, -0.18932117521762848, -0.14903317391872406, -0.2299625426530838, -0.047536667436361313, -0.13775315880775452, 0.19904322922229767, -0.01309495884925127, 0.12677353620529175, 0.16797032952308655, -0.15202733874320984, -0.036314576864242554, 0.15056470036506653, 0.056778579950332642, 0.23545815050601959, 0.25136178731918335, 0.17402732372283936, 0.027191681787371635, 0.08567279577255249, 0.0077197537757456303, 0.11676500737667084, -0.09596523642539978, -0.082294948399066925, -0.18850505352020264, -0.021989118307828903, 0.18213099241256714, 0.057986613363027573, 0.1750999391078949, 0.19503095746040344, -0.019523123279213905, 0.049570560455322266, 0.068179622292518616, 0.1100054606795311, -0.11505426466464996, 0.070305734872817993, -0.088297136127948761, -0.25216028094291687, 0.15384063124656677, 0.097620308399200439, 0.21840862929821014, -0.18549519777297974, 0.13233247399330139, 0.23998786509037018, -0.21575675904750824, -0.21071362495422363, -0.13386678695678711, 0.058927834033966064, 0.14790059626102448, 0.037570163607597351, -0.20464268326759338, 0.05746004730463028, -0.2006385326385498, -0.11878389120101929, -0.15097241103649139, 0.19190219044685364, 0.0025662574917078018, -0.041326139122247696, -0.2088731974363327, -0.05337177962064743, -0.17734935879707336, 0.113629549741745, -0.13532370328903198, 0.1705985963344574, 0.21921449899673462, -0.0083123035728931427, -0.042799621820449829, -0.18050014972686768, 0.2326357364654541, -0.067594558000564575, -0.24850071966648102, 0.17767652869224548, 0.13323973119258881, 0.24265719950199127, -0.21677976846694946, -0.12011788785457611, 
  0.24378961324691772, 0.070451676845550537, 0.12257212400436401, -0.24362261593341827, -0.202927365899086, -0.1102006807923317, 0.15343664586544037, 0.023627452552318573, 0.00068806827766820788, 0.09376111626625061, -0.1661146879196167, 0.086404971778392792, 0.077438920736312866, -0.17288275063037872, 0.12812308967113495, -0.12298230826854706, 0.011244026944041252, -0.016914805397391319, 0.084327712655067444, 0.051656097173690796, -0.18746291100978851, 0.11105532944202423, -0.22983279824256897, 0.20087248086929321, 0.21134799718856812, -0.027917457744479179, -0.12305827438831329, -0.061367087066173553, 0.18400460481643677, 0.17660807073116302, -0.21335385739803314, -0.20398193597793579, -0.18616534769535065, -0.049684841185808182, 0.25059103965759277, 0.21167005598545074, -0.068845458328723907, -0.17161902785301208, -0.17237874865531921, 0.081077516078948975, 0.096312269568443298, -0.017157485708594322, 0.026976155117154121, -0.059148870408535004, -0.062782600522041321, 0.15024581551551819, 0.016749650239944458, -0.22563078999519348, 0.15512236952781677, 0.091818869113922119, -0.070967733860015869, -0.13279929757118225, -0.031476743519306183, 0.00039272598223760724, 0.1659010648727417, 0.22451551258563995, -0.14094254374504089, -0.088318690657615662, 0.065622217953205109, -0.053423464298248291, 0.070367313921451569, 0.089246571063995361, 0.1663149893283844, 0.16845254600048065, 0.057846568524837494, -0.21639423072338104, -0.19889561831951141, 0.12032540142536163, 0.109516941010952, 0.077613994479179382, 0.20034542679786682, 0.04164997860789299, -0.038487277925014496, -0.1124088391661644, -0.0033292323350906372, 0.21138620376586914, 0.079378746449947357, -0.14996375143527985, 0.12240023165941238, 0.25025653839111328, -0.084882289171218872, -0.14902028441429138, 0.086445048451423645, -0.1453041136264801, 
  -0.048901252448558807, 0.065047010779380798, 0.19610926508903503, -0.056831300258636475, -0.18577300012111664, -0.2159002274274826, 0.2259015291929245, -0.096986144781112671, 0.17352673411369324, -0.069691039621829987, 0.19135428965091705, 0.20447483658790588, 0.14222852885723114, 0.20052126049995422, -0.10419998317956924, 0.091655582189559937, -0.115494005382061, -0.069525294005870819, 0.21455873548984528, 0.0063954940997064114, -0.068469353020191193, -0.051183182746171951, 0.21777170896530151, -0.0056649660691618919, 0.060624841600656509, 0.079955622553825378, 0.14106445014476776, 0.10159478336572647, 0.22371374070644379, 0.076159544289112091, -0.035442348569631577, -0.034173928201198578, 0.025272408500313759, -0.081755943596363068, 0.04845840111374855, -0.037716656923294067, -0.18029442429542542, 0.044362269341945648, 0.046988599002361298, 0.11118184030056, 0.088564783334732056, 0.158085897564888, 0.18950606882572174, -0.053387682884931564, -0.14149878919124603, -0.061036773025989532, 0.053431399166584015, 0.10993397980928421, -0.21959623694419861, -0.021051088348031044, -0.18094949424266815, 0.1460663378238678, 0.05929214134812355, 0.066030308604240417, 0.20936872065067291, 0.12170697003602982, 0.10308721661567688, -0.058281715959310532, 0.010865618474781513, -0.1742672473192215, 0.17407587170600891, 0.12056481093168259, -0.022966096177697182, -0.07202785462141037, 0.16860546171665192, 0.12518557906150818, 0.13639405369758606, -0.076312020421028137, -0.056835655122995377, -0.0697360560297966, -0.20004990696907043, -0.0088332705199718475, -0.15054766833782196, -0.13000354170799255, 0.19053256511688232, 0.066244110465049744, 0.087621532380580902, 0.19143176078796387, 0.092119269073009491, 0.024795815348625183, 0.093113571405410767, 0.2002360075712204, -0.21500100195407867, -0.14348764717578888, 
  -0.10945947468280792, -0.227641761302948, 0.0024865567684173584, -0.076458349823951721, 0.14442351460456848, -0.20566335320472717, -0.14225021004676819, -0.23161385953426361, -0.19271430373191833, 0.11416378617286682, -0.055294841527938843, -0.22072570025920868, 0.058494299650192261, 0.12691310048103333, -0.08275449275970459, 0.17540886998176575, 0.030371248722076416, -0.080599725246429443, 0.19781723618507385, -0.064855456352233887, 0.1114305853843689, 0.13375291228294373, -0.14930833876132965, 0.14856031537055969, 0.11932629346847534, -0.075645685195922852, 0.016673952341079712, -0.11491082608699799, 0.19925948977470398, -0.062882229685783386, -0.10147123038768768, 0.05647316575050354, -0.23057080805301666, 0.213695228099823, 0.14692646265029907, 0.14723941683769226, 0.19189521670341492, -0.15689834952354431, -0.2015608549118042, -0.14837747812271118, -0.028845950961112976, 0.036511600017547607, -0.19243507087230682, -0.1163923591375351, -0.23786309361457825, -0.094169661402702332, 0.21909058094024658, 0.13450604677200317, -0.0355243980884552, 0.23691833019256592, 0.15797770023345947, -0.21065147221088409, -0.2381136417388916, 0.04400220513343811, -0.15684676170349121, -0.23389993607997894, -0.1613212525844574, 0.072126716375350952, -0.04582001268863678, 0.10417178273200989, -0.078957095742225647, -0.1718839704990387, -0.18229493498802185, 0.15750181674957275, 0.03808671236038208, 0.058681517839431763, 0.15758135914802551, 0.089523464441299438, 0.020200908184051514, 0.16282850503921509, -0.0010328590869903564, -0.11243972182273865, 0.10800352692604065, 0.15333884954452515, 0.065054327249526978, -0.2349262535572052, -0.09386482834815979, 0.180998295545578, -0.20563340187072754, -0.20570802688598633, 0.03758576512336731, 0.10245522856712341, 0.20093774795532227, 0.15241032838821411, 
  0.048394199460744858, -0.23527957499027252, -0.1265745609998703, -0.021444110199809074, 0.22464501857757568, 0.24271917343139648, -0.20262312889099121, 0.23369333148002625, -0.038259763270616531, 0.055737800896167755, 0.050187025219202042, 0.062523886561393738, 0.19966098666191101, 0.064156651496887207, -0.054715931415557861, -0.17859573662281036, -0.24888963997364044, -0.040702193975448608, -0.19320385158061981, -0.088668078184127808, -0.18436969816684723, -0.18861503899097443, -0.0071634193882346153, -0.077506788074970245, -0.096805959939956665, -0.23848766088485718, -0.16306276619434357, 0.19484017789363861, -0.047127220779657364, 0.0076433131471276283, 0.062667086720466614, -0.22701719403266907, -0.19143643975257874, -0.24393010139465332, -0.021941164508461952, 0.043982397764921188, 0.122794508934021, -0.0091287428513169289, 0.20525307953357697, -0.064895674586296082, 0.23053283989429474, 0.1016872301697731, 0.18714255094528198, -0.18177777528762817, 0.19128221273422241, -0.12241673469543457, -0.011648019775748253, 0.13436631858348846, 0.24013140797615051, 0.14416612684726715, 0.063744962215423584, 0.11369103193283081, -0.16835084557533264, -0.11159311234951019, 0.21199409663677216, -0.10586118698120117, 0.032398343086242676, 0.16339711844921112, 0.11967792361974716, -0.036447364836931229, 0.0047779097221791744, -0.078089840710163116, -0.047321107238531113, -0.18017809092998505, 0.14995358884334564, 0.17523881793022156, 0.18646974861621857, 0.17945322394371033, 0.04693329706788063, 0.2293684184551239, -0.20599579811096191, -0.05257590115070343, 0.14109274744987488, -0.047309786081314087, 0.1122182160615921, -0.17340561747550964, -0.13132262229919434, -0.10961483418941498, 0.10078742355108261, -0.13893178105354309, -0.092027507722377777, 0.10530155152082443, -0.06991703063249588, -0.090162016451358795, 
  0.22576099634170532, -0.19705364108085632, -0.12388546764850616, 0.047978170216083527, -0.0016468064859509468, -0.15980778634548187, -0.10433220118284225, 0.063111506402492523, 0.11843541264533997, 0.080533891916275024, 0.22581076622009277, -0.23464915156364441, -0.18610957264900208, 0.24065090715885162, -0.22483401000499725, -0.082728005945682526, -0.2009328156709671, 0.03595239669084549, 0.13373012840747833, -0.18888290226459503, 0.19825500249862671, 0.23030956089496613, -0.11943398416042328, 0.17227056622505188, -0.22901637852191925, -0.14127637445926666, -0.041646983474493027, -0.18521025776863098, 0.19576229155063629, -0.057698976248502731, 0.24769872426986694, -0.12646996974945068, -0.11410212516784668, 0.14120587706565857, -0.037190455943346024, -0.16312825679779053, -0.19160377979278564, 0.053386949002742767, 0.18267993628978729, -0.22097562253475189, -0.22783663868904114, 0.20883239805698395, -0.21916544437408447, 0.16402091085910797, -0.028056560084223747, 0.15339873731136322, -0.089118063449859619, -0.15398041903972626, -0.23779274523258209, -0.10162067413330078, -0.046393439173698425, 0.098886393010616302, 0.064427308738231659, -0.048135269433259964, -0.179975226521492, -0.14308711886405945, 0.22326020896434784, -0.055220570415258408, 0.20739035308361053, -0.14326094090938568, 0.0092874383553862572, 0.093882881104946136, -0.13103081285953522, 0.20983304083347321, 0.034705813974142075, 0.22284683585166931, 0.21119838953018188, 0.15659011900424957, -0.042772542685270309, 0.12600010633468628, 0.033180389553308487, -0.13571357727050781, 0.22533364593982697, -0.10186896473169327, 0.20485731959342957, 0.11247881501913071, -0.096340425312519073, 0.059801157563924789, 0.0015835217200219631, 0.019780246540904045, 0.11956064403057098, 0.025488466024398804, -0.14491699635982513, -0.10364054888486862, 
  -0.0017284313216805458, 0.20156611502170563, -0.1776161789894104, -0.22979946434497833, -0.20886196196079254, 0.078909851610660553, -0.025916576385498047, 0.052917495369911194, 0.089494571089744568, 0.082869462668895721, -0.0078630410134792328, 0.095580779016017914, -0.14649184048175812, 0.10520891100168228, 0.11146903783082962, 0.1840459406375885, 0.037898238748311996, 0.095819652080535889, 0.083387970924377441, 0.14060106873512268, -0.21107529103755951, 0.19947102665901184, -0.19605429470539093, 0.10922003537416458, 0.061425350606441498, 0.0063357623293995857, -0.11009202897548676, -0.093972466886043549, -0.047380536794662476, -0.12914709746837616, 0.064914673566818237, -0.090603195130825043, -0.086010284721851349, 0.12420705705881119, -0.013518890365958214, 0.050206471234560013, 0.0038622510619461536, -0.21506233513355255, 0.069816797971725464, 0.2159607857465744, 0.13054756820201874, -0.11736692488193512, 0.067971765995025635, -0.17169347405433655, 0.16631008684635162, -0.15864174067974091, -0.21394863724708557, -0.059528686106204987, -0.16465196013450623, 0.16385093331336975, 0.098798133432865143, -0.010332132689654827, 0.1808924674987793, 0.21203537285327911, 0.10167580842971802, -0.1409832090139389, 0.2054915577173233, 0.10733611881732941, -0.16957063972949982, 0.20083999633789062, 0.012784065678715706, -0.14138986170291901, 0.034679874777793884, -0.096527040004730225, 0.034598775207996368, 0.093650422990322113, 0.032970622181892395, -0.14516259729862213, 0.023655541241168976, 0.15990297496318817, -0.20691411197185516, 0.19280348718166351, 0.18850530683994293, 0.2041727602481842, 0.097838304936885834, 0.17060811817646027, -0.098864778876304626, 0.05410090833902359, 0.1964135468006134, 0.092861033976078033, -0.1590617448091507, -0.13606026768684387, 0.020795265212655067, 0.22129258513450623, 
  0.003198087215423584, -0.15314942598342896, -0.094711571931838989, -0.017250552773475647, 0.19306442141532898, -0.056928589940071106, -0.080176129937171936, -0.17235338687896729, 0.08668816089630127, -0.20987242460250854, -0.20823340117931366, -0.075249567627906799, 0.055278569459915161, 0.11611795425415039, -0.082735419273376465, 0.086909890174865723, -0.18820704519748688, -0.11875070631504059, 0.10356378555297852, -0.077203258872032166, -0.20014156401157379, -0.13755534589290619, 0.090057611465454102, -0.10169468820095062, 0.098903000354766846, -0.078477159142494202, -0.042341381311416626, 0.18223142623901367, -0.16712136566638947, 0.17169928550720215, 0.086203455924987793, -0.0019503235816955566, 0.18511036038398743, -0.14298270642757416, -0.07151620090007782, -0.12610718607902527, 0.070419549942016602, -0.20446351170539856, -0.1065278947353363, 0.0083782821893692017, -0.00096940994262695312, -0.040156960487365723, 0.040754944086074829, 0.17338302731513977, -0.026856228709220886, -0.1909128725528717, 0.18533599376678467, -0.21861544251441956, -0.018062308430671692, -0.094576194882392883, 0.018290787935256958, -0.03022022545337677, -0.043969288468360901, -0.17491632699966431, -0.033401310443878174, -0.22676271200180054, -0.035231590270996094, -0.049405977129936218, 0.15416824817657471, -0.16677238047122955, -0.15421073138713837, 0.20521363615989685, -0.1386633962392807, 0.014195382595062256, -0.16804364323616028, 0.10840508341789246, 0.0039436370134353638, -0.089299395680427551, -0.0051243603229522705, 0.22620558738708496, -0.19660490751266479, -0.048635572195053101, -0.12326151132583618, 0.20495176315307617, 0.17797309160232544, 0.12481141090393066, -0.11103120446205139, 0.064191460609436035, -0.1427554190158844, 0.046561449766159058, 0.051060616970062256, 0.21217969059944153, -0.2393549382686615, -0.077996119856834412, 
  -0.045228801667690277, 0.11690839380025864, 0.21216750144958496, 0.17776182293891907, 0.15235784649848938, -0.094690382480621338, -0.086105756461620331, 0.17793998122215271, 0.10136734694242477, -0.034540127962827682, -0.090392947196960449, 0.22832223773002625, -0.062164299190044403, 0.17740733921527863, -0.1715337336063385, -0.082688890397548676, -0.16857482492923737, 0.07153022289276123, 0.21963649988174438, -0.12955066561698914, 0.11919105798006058, -0.10113982856273651, -0.17820848524570465, 0.23047178983688354, -0.13455080986022949, -0.18884870409965515, -0.12553940713405609, 0.082141399383544922, -0.016975224018096924, -0.14224338531494141, -0.035594340413808823, -0.16997146606445312, 0.0088161462917923927, 0.059540949761867523, 0.014639695174992085, 0.2351808100938797, 0.2196943610906601, -0.13535062968730927, 0.15403367578983307, -0.2080870121717453, -0.2149350494146347, -0.069619432091712952, 0.24033437669277191, -0.075551576912403107, 0.068539664149284363, -0.14144977927207947, 0.021223092451691628, 0.22637249529361725, -0.19320128858089447, 0.11576966941356659, -0.11920270323753357, -0.15132740139961243, 0.20286861062049866, 0.11187691241502762, 0.058551710098981857, -0.17418807744979858, 0.17791572213172913, -0.2104979008436203, -0.055250577628612518, -0.11886941641569138, 0.073805920779705048, -0.18369175493717194, 0.12040635943412781, 0.22655375301837921, -0.057640634477138519, 0.13015404343605042, -0.020761217921972275, 0.0095878941938281059, 0.05860099196434021, -0.07645174115896225, 0.18232940137386322, -0.086609356105327606, 0.15492570400238037, 0.21466392278671265, 0.11103200912475586, 0.058098394423723221, -0.19499786198139191, -0.17716751992702484, 0.17087925970554352, -0.18784937262535095, -0.19877511262893677, -0.22129277884960175, -0.21677489578723907, 0.037975095212459564, 
  -0.20081067085266113, -0.061076223850250244, 0.12681248784065247, -0.23294569551944733, 0.11516267061233521, 0.020194143056869507, -0.15531465411186218, -0.022516697645187378, -0.0067798644304275513, -0.083917737007141113, -0.22051776945590973, -0.091346040368080139, -0.20394273102283478, -0.16891099512577057, -0.17811150848865509, -0.12451054900884628, 0.015102952718734741, -0.14106515049934387, -0.13053581118583679, 0.091460496187210083, -0.11870431900024414, 0.19770166277885437, -0.12998056411743164, 0.18762308359146118, -0.10351608693599701, -0.20801104605197906, -0.0094200819730758667, -0.06797422468662262, -0.21302521228790283, -0.16514584422111511, 0.11016532778739929, -0.10337814688682556, -0.15136626362800598, -0.2148703932762146, 0.23542922735214233, 0.18846869468688965, 0.066164791584014893, -0.16068503260612488, -0.18406686186790466, -0.079926043748855591, -0.17350603640079498, 0.048042356967926025, -0.14307960867881775, 0.12295004725456238, 0.0063597112894058228, -0.037190854549407959, 0.23957124352455139, 0.054129421710968018, -0.18865710496902466, -0.2196340411901474, 0.013117939233779907, -0.20363251864910126, 0.10679051280021667, -0.13696533441543579, 0.15138852596282959, -0.16858670115470886, -0.15549361705780029, -0.15024258196353912, -0.065293416380882263, 0.17074945569038391, -0.075042486190795898, -0.12487120926380157, -0.15737423300743103, 0.18696138262748718, 0.11774355173110962, -0.12442269921302795, 0.20802071690559387, -0.19347375631332397, 0.012334704399108887, 0.20968630909919739, 0.14810803532600403, 0.12999042868614197, 0.1798613965511322, -0.10885389149188995, -0.22508853673934937, 0.072115331888198853, 0.21352061629295349, 0.042916625738143921, -0.069517090916633606, 0.081946581602096558, 0.067339479923248291, 0.099863409996032715, 0.20732665061950684, -0.0069743990898132324, 
  -0.0077491551637649536, 0.17940109968185425, 0.012550026178359985, -0.1169385090470314, -0.040776178240776062, -0.078425958752632141, 0.071104735136032104, -0.031579151749610901, 0.1716422438621521, 0.1619529128074646, -0.19292841851711273, 0.18883106112480164, 0.16430741548538208, -0.0027429461479187012, -0.0038425177335739136, -0.097817987203598022, -0.0066156238317489624, -0.19985711574554443, -0.12703073024749756, 0.064360618591308594, -0.090228304266929626, -0.21884851157665253, 0.18729645013809204, -0.18739454448223114, -0.015914648771286011, 0.006270483136177063, -0.15446957945823669, -0.10048264265060425, 0.084236353635787964, 0.18900087475776672, -0.16650380194187164, 0.035110592842102051, 0.2016347348690033, -0.14890655875205994, 0.020587623119354248, 0.082673519849777222, -0.21792830526828766, 0.051606148481369019, 0.014551877975463867, -0.030527397990226746, -0.15635856986045837, -0.1653573215007782, 0.062769979238510132, 0.13340657949447632, 0.0014758110046386719, -0.19290688633918762, -0.22281043231487274, 0.06393122673034668, -0.022913843393325806, 0.0086139440536499023, 0.060980647802352905, 0.1097295880317688, -0.20161324739456177, 0.081356614828109741, 0.11049026250839233, -0.12218187004327774, 0.12632668018341064, -0.19896931946277618, -0.16025908291339874, 0.19903415441513062, -0.18470372259616852, 0.15966111421585083, -0.17495298385620117, 0.084233105182647705, -0.17985990643501282, -0.026629805564880371, -0.038452252745628357, -0.16180378198623657, -0.1724565178155899, -0.14144223928451538, -0.22852955758571625, 0.1579819917678833, -0.070199429988861084, -0.033341974020004272, -0.051734477281570435, 0.080473124980926514, -0.19948381185531616, -0.23416581749916077, -0.20845772325992584, -0.10590867698192596, 0.18358227610588074, -0.016806453466415405, -0.0068286657333374023, -0.20280507206916809, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,84 } };
const ALIGN(16) float tensor_data5[10*20] = { 
  0.1690867692232132, -0.29720327258110046, -0.27319309115409851, 0.04335012286901474, 0.38826009631156921, 0.045864559710025787, 0.43442118167877197, -0.40982192754745483, -0.016715602949261665, -0.21071922779083252, 0.10670344531536102, 0.068079076707363129, 0.24257105588912964, 0.42799675464630127, 0.19919560849666595, -0.32716190814971924, 0.00019213557243347168, -0.11561310291290283, -0.26989120244979858, 0.094074904918670654, 
  -0.20758676528930664, -0.43477892875671387, 0.27429041266441345, 0.26301091909408569, 0.20818820595741272, -0.1406867653131485, -0.19914223253726959, -0.36068546772003174, -0.35145226120948792, 0.059115096926689148, -0.20073221623897552, -0.19689929485321045, 0.2409820556640625, 0.092520952224731445, 0.27658286690711975, 0.35482186079025269, -0.19190970063209534, 0.14726981520652771, -0.1693665087223053, -0.11774033308029175, 
  -0.069779060781002045, -0.37843886017799377, -0.012793373316526413, 0.3966013491153717, -0.17050535976886749, -0.2048647552728653, -0.13627669215202332, 0.072734154760837555, -0.14613012969493866, -0.043710947036743164, 0.13992306590080261, 0.18949286639690399, -0.081969767808914185, -0.33534777164459229, -0.057359986007213593, -0.27253639698028564, 0.32243669033050537, -0.37862575054168701, -0.38322222232818604, -0.30915829539299011, 
  0.23751966655254364, 0.060874789953231812, 0.36500057578086853, 0.005199856124818325, -0.2393571138381958, 0.30540812015533447, -0.22272127866744995, -0.1838805079460144, -0.093725085258483887, 0.29086205363273621, 0.39669099450111389, 0.18007424473762512, -0.28030186891555786, -0.36546063423156738, -0.024989793077111244, -0.17984724044799805, -0.10153305530548096, -0.20030412077903748, 0.40465575456619263, 0.32163810729980469, 
  -0.1590079665184021, 0.22824074327945709, -0.38330188393592834, -0.16889885067939758, -0.31831449270248413, 0.25227051973342896, -0.13781583309173584, 0.09445594996213913, -0.3495827317237854, 0.25052565336227417, 0.36086538434028625, 0.21504287421703339, -0.077009856700897217, 0.1820848137140274, 0.086201794445514679, -0.37509173154830933, -0.18604752421379089, 0.36902529001235962, 0.27800458669662476, 0.22064423561096191, 
  -0.35253363847732544, 0.26902633905410767, -0.25199055671691895, 0.19953919947147369, -0.12314454466104507, -0.43155485391616821, -0.025772631168365479, 0.30696257948875427, -0.45027625560760498, -0.19094265997409821, 0.27995562553405762, 0.23197677731513977, -0.19458532333374023, 0.24666474759578705, -0.08350323885679245, -0.24760535359382629, -0.14094427227973938, 0.25244289636611938, -0.25955837965011597, 0.015761494636535645, 
  0.36587190628051758, 0.20220062136650085, -0.20394030213356018, -0.27632120251655579, 0.32576647400856018, 0.31977835297584534, 0.0431995689868927, -0.1021934449672699, -0.084190636873245239, 0.025222696363925934, 0.25596487522125244, 0.17721585929393768, -0.27470189332962036, -0.13348793983459473, 0.060251954942941666, -0.044255968183279037, 0.22909986972808838, -0.049562368541955948, -0.061746180057525635, -0.13303959369659424, 
  -0.071213975548744202, 0.34327179193496704, 0.18682003021240234, 0.2374541312456131, -0.054925955832004547, 0.33520397543907166, 0.33456879854202271, -0.42073869705200195, 0.42948758602142334, -0.13073013722896576, -0.24195778369903564, 0.43154790997505188, 0.25406181812286377, -0.10143332928419113, -0.37742885947227478, 0.19818855822086334, 0.32872921228408813, 0.03469858318567276, 0.051685571670532227, 0.32153928279876709, 
  0.25269937515258789, 0.15231242775917053, 0.19583281874656677, 0.15670913457870483, 0.34510788321495056, 0.11816281080245972, -0.41686040163040161, -0.10878238081932068, -0.097937621176242828, 0.062709078192710876, 0.38012126088142395, 0.088017091155052185, -0.018651306629180908, -0.40846681594848633, -0.14000554382801056, 0.35142767429351807, -0.33315008878707886, 0.25489106774330139, -0.18146216869354248, -0.12500813603401184, 
  0.18233004212379456, -0.27410075068473816, -0.075367338955402374, -0.012647513300180435, 0.31440994143486023, 0.37275901436805725, -0.076080828905105591, 0.032795291393995285, 0.30259692668914795, -0.34126415848731995, -0.21296612918376923, 0.18338862061500549, -0.28586220741271973, -0.21367056667804718, 0.2060977965593338, -0.082922071218490601, -0.070471644401550293, 0.32392969727516174, 0.010248482227325439, 0.29526698589324951, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const ALIGN(16) float tensor_data6[2*10] = { 
  0.40935879945755005, -0.58104336261749268, 0.39470529556274414, 0.59417450428009033, 0.68358200788497925, -0.44849458336830139, -0.23157469928264618, -0.5872989296913147, 0.057667329907417297, 0.48576870560646057, 
  0.38702255487442017, 0.092545472085475922, -0.11869847774505615, -0.1266990602016449, -0.53105342388153076, 0.0023513191845268011, -0.66964948177337646, 0.29887545108795166, -0.52965593338012695, 0.20986390113830566, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 2,10 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,2 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,2 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,2 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,1 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 336, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 40, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 80, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 8, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 6720, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 800, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 80, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 336), (TfLiteIntArray*)&g0::tensor_dimension7, 80, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 40, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 48), (TfLiteIntArray*)&g0::tensor_dimension9, 8, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 8, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = kTfLiteFloat32;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = kTfLiteFloat32;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
